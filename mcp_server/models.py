# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:34:42+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class AWSAccountId(
    RootModel[constr(pattern=r'^\d{12}$', min_length=12, max_length=12)]
):
    root: constr(pattern=r'^\d{12}$', min_length=12, max_length=12) = Field(
        ...,
        description='An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.',
    )


class ActiveDirectoryError(RootModel[Any]):
    root: Any


class ActiveDirectoryFullyQualifiedName(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,255}$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,255}$',
        min_length=1,
        max_length=255,
    )


class AdminPassword(RootModel[SecretStr]):
    root: SecretStr


class AdministrativeActionType(Enum):
    FILE_SYSTEM_UPDATE = 'FILE_SYSTEM_UPDATE'
    STORAGE_OPTIMIZATION = 'STORAGE_OPTIMIZATION'
    FILE_SYSTEM_ALIAS_ASSOCIATION = 'FILE_SYSTEM_ALIAS_ASSOCIATION'
    FILE_SYSTEM_ALIAS_DISASSOCIATION = 'FILE_SYSTEM_ALIAS_DISASSOCIATION'
    VOLUME_UPDATE = 'VOLUME_UPDATE'
    SNAPSHOT_UPDATE = 'SNAPSHOT_UPDATE'
    RELEASE_NFS_V3_LOCKS = 'RELEASE_NFS_V3_LOCKS'
    VOLUME_RESTORE = 'VOLUME_RESTORE'


class AliasLifecycle(Enum):
    AVAILABLE = 'AVAILABLE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_FAILED = 'DELETE_FAILED'


class AlternateDNSName(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{4,253}$',
            min_length=4,
            max_length=253,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{4,253}$',
        min_length=4,
        max_length=253,
    )


class AlternateDNSNames(RootModel[List[AlternateDNSName]]):
    root: List[AlternateDNSName] = Field(..., max_length=50)


class ArchivePath(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{3,4357}$',
            min_length=3,
            max_length=4357,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{3,4357}$',
        min_length=3,
        max_length=4357,
    )


class AutoImportPolicyType(Enum):
    NONE = 'NONE'
    NEW = 'NEW'
    NEW_CHANGED = 'NEW_CHANGED'
    NEW_CHANGED_DELETED = 'NEW_CHANGED_DELETED'


class AutomaticBackupRetentionDays(RootModel[conint(ge=0, le=90)]):
    root: conint(ge=0, le=90) = Field(
        ...,
        description='The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>.',
    )


class BackupBeingCopied(RootModel[Any]):
    root: Any


class BackupId(
    RootModel[constr(pattern=r'^(backup-[0-9a-f]{8,})$', min_length=12, max_length=128)]
):
    root: constr(pattern=r'^(backup-[0-9a-f]{8,})$', min_length=12, max_length=128) = (
        Field(
            ...,
            description='The ID of the source backup. Specifies the backup that you are copying.',
        )
    )


class BackupIds(RootModel[List[BackupId]]):
    root: List[BackupId] = Field(
        ..., description='A list of backup IDs.', max_length=50
    )


class BackupInProgress(RootModel[Any]):
    root: Any


class BackupLifecycle(Enum):
    AVAILABLE = 'AVAILABLE'
    CREATING = 'CREATING'
    TRANSFERRING = 'TRANSFERRING'
    DELETED = 'DELETED'
    FAILED = 'FAILED'
    PENDING = 'PENDING'
    COPYING = 'COPYING'


class BackupNotFound(RootModel[Any]):
    root: Any


class BackupRestoring(RootModel[Any]):
    root: Any


class BackupType(Enum):
    AUTOMATIC = 'AUTOMATIC'
    USER_INITIATED = 'USER_INITIATED'
    AWS_BACKUP = 'AWS_BACKUP'


class BadRequest(RootModel[Any]):
    root: Any


class BatchImportMetaDataOnCreate(RootModel[bool]):
    root: bool


class CapacityToRelease(RootModel[conint(ge=1, le=2147483647)]):
    root: conint(ge=1, le=2147483647)


class ClientRequestToken(
    RootModel[constr(pattern=r'[A-za-z0-9_.-]{0,63}$', min_length=1, max_length=63)]
):
    root: constr(pattern=r'[A-za-z0-9_.-]{0,63}$', min_length=1, max_length=63) = Field(
        ...,
        description='(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.',
    )


class CoolingPeriod(RootModel[conint(ge=2, le=183)]):
    root: conint(ge=2, le=183)


class CopyTagsToDataRepositoryAssociations(RootModel[bool]):
    root: bool


class CreationTime(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.',
    )


class DNSName(
    RootModel[
        constr(
            pattern=r'^((fs|fc)i?-[0-9a-f]{8,}\..{4,253})$',
            min_length=16,
            max_length=275,
        )
    ]
):
    root: constr(
        pattern=r'^((fs|fc)i?-[0-9a-f]{8,}\..{4,253})$', min_length=16, max_length=275
    ) = Field(
        ...,
        description='The Domain Name Service (DNS) name for the file system. You can mount your file system using its DNS name.',
    )


class DailyTime(
    RootModel[
        constr(pattern=r'^([01]\d|2[0-3]):?([0-5]\d)$', min_length=5, max_length=5)
    ]
):
    root: constr(
        pattern=r'^([01]\d|2[0-3]):?([0-5]\d)$', min_length=5, max_length=5
    ) = Field(
        ...,
        description='A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily. ',
    )


class DataCompressionType(Enum):
    NONE = 'NONE'
    LZ4 = 'LZ4'


class DataRepositoryAssociationId(
    RootModel[constr(pattern=r'^(dra-[0-9a-f]{8,})$', min_length=13, max_length=23)]
):
    root: constr(pattern=r'^(dra-[0-9a-f]{8,})$', min_length=13, max_length=23)


class DataRepositoryAssociationIds(RootModel[List[DataRepositoryAssociationId]]):
    root: List[DataRepositoryAssociationId] = Field(..., max_length=50)


class DataRepositoryAssociationNotFound(RootModel[Any]):
    root: Any


class DataRepositoryLifecycle(Enum):
    CREATING = 'CREATING'
    AVAILABLE = 'AVAILABLE'
    MISCONFIGURED = 'MISCONFIGURED'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class DataRepositoryTaskEnded(RootModel[Any]):
    root: Any


class DataRepositoryTaskExecuting(RootModel[Any]):
    root: Any


class DataRepositoryTaskFilterName(Enum):
    file_system_id = 'file-system-id'
    task_lifecycle = 'task-lifecycle'
    data_repository_association_id = 'data-repository-association-id'
    file_cache_id = 'file-cache-id'


class DataRepositoryTaskFilterValue(
    RootModel[
        constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128)


class DataRepositoryTaskFilterValues(RootModel[List[DataRepositoryTaskFilterValue]]):
    root: List[DataRepositoryTaskFilterValue] = Field(..., max_length=20)


class DataRepositoryTaskLifecycle(Enum):
    PENDING = 'PENDING'
    EXECUTING = 'EXECUTING'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    CANCELED = 'CANCELED'
    CANCELING = 'CANCELING'


class DataRepositoryTaskNotFound(RootModel[Any]):
    root: Any


class DataRepositoryTaskPath(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{0,4096}$',
            min_length=0,
            max_length=4096,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{0,4096}$',
        min_length=0,
        max_length=4096,
    )


class DataRepositoryTaskPaths(RootModel[List[DataRepositoryTaskPath]]):
    root: List[DataRepositoryTaskPath] = Field(..., max_length=100)


class DataRepositoryTaskType(Enum):
    EXPORT_TO_REPOSITORY = 'EXPORT_TO_REPOSITORY'
    IMPORT_METADATA_FROM_REPOSITORY = 'IMPORT_METADATA_FROM_REPOSITORY'
    RELEASE_DATA_FROM_FILESYSTEM = 'RELEASE_DATA_FROM_FILESYSTEM'
    AUTO_RELEASE_DATA = 'AUTO_RELEASE_DATA'


class DeleteBackupRequest(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )


class DeleteBackupResponse(BaseModel):
    BackupId_1: Optional[BackupId] = Field(None, alias='BackupId')
    Lifecycle: Optional[BackupLifecycle] = None


class DeleteDataInFileSystem(RootModel[bool]):
    root: bool


class DeleteDataRepositoryAssociationRequest(BaseModel):
    AssociationId: DataRepositoryAssociationId
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DeleteDataInFileSystem_1: Optional[DeleteDataInFileSystem] = Field(
        None, alias='DeleteDataInFileSystem'
    )


class DeleteDataRepositoryAssociationResponse(BaseModel):
    AssociationId: Optional[DataRepositoryAssociationId] = None
    DeleteDataInFileSystem_1: Optional[DeleteDataInFileSystem] = Field(
        None, alias='DeleteDataInFileSystem'
    )
    Lifecycle: Optional[DataRepositoryLifecycle] = None


class DeleteFileSystemOpenZFSOption(Enum):
    DELETE_CHILD_VOLUMES_AND_SNAPSHOTS = 'DELETE_CHILD_VOLUMES_AND_SNAPSHOTS'


class DeleteFileSystemOpenZFSOptions(RootModel[List[DeleteFileSystemOpenZFSOption]]):
    root: List[DeleteFileSystemOpenZFSOption] = Field(..., max_length=1)


class DeleteOpenZFSVolumeOption(Enum):
    DELETE_CHILD_VOLUMES_AND_SNAPSHOTS = 'DELETE_CHILD_VOLUMES_AND_SNAPSHOTS'


class DeleteOpenZFSVolumeOptions(RootModel[List[DeleteOpenZFSVolumeOption]]):
    root: List[DeleteOpenZFSVolumeOption] = Field(..., max_length=1)


class DeleteVolumeOpenZFSConfiguration(BaseModel):
    Options: Optional[DeleteOpenZFSVolumeOptions] = None


class DirectoryId(
    RootModel[constr(pattern=r'^d-[0-9a-f]{10}$', min_length=12, max_length=12)]
):
    root: constr(pattern=r'^d-[0-9a-f]{10}$', min_length=12, max_length=12)


class DirectoryPassword(RootModel[SecretStr]):
    root: SecretStr


class DirectoryUserName(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,256}$',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,256}$',
        min_length=1,
        max_length=256,
    )


class DiskIopsConfigurationMode(Enum):
    AUTOMATIC = 'AUTOMATIC'
    USER_PROVISIONED = 'USER_PROVISIONED'


class DriveCacheType(Enum):
    NONE = 'NONE'
    READ = 'READ'


class EndTime(RootModel[datetime]):
    root: datetime


class ErrorMessage(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256) = Field(
        ..., description='A detailed error message.'
    )


class EventType(Enum):
    NEW = 'NEW'
    CHANGED = 'CHANGED'
    DELETED = 'DELETED'


class EventTypes(RootModel[List[EventType]]):
    root: List[EventType] = Field(..., max_length=3)


class FailedCount(RootModel[int]):
    root: int


class FileCacheFailureDetails(BaseModel):
    Message: Optional[ErrorMessage] = None


class FileCacheId(
    RootModel[constr(pattern=r'^(fc-[0-9a-f]{8,})$', min_length=11, max_length=21)]
):
    root: constr(pattern=r'^(fc-[0-9a-f]{8,})$', min_length=11, max_length=21)


class FileCacheIds(RootModel[List[FileCacheId]]):
    root: List[FileCacheId] = Field(..., max_length=50)


class FileCacheLifecycle(Enum):
    AVAILABLE = 'AVAILABLE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'
    FAILED = 'FAILED'


class FileCacheLustreDeploymentType(Enum):
    CACHE_1 = 'CACHE_1'


class FileCacheNotFound(RootModel[Any]):
    root: Any


class FileCacheType(Enum):
    LUSTRE = 'LUSTRE'


class FileSystemAdministratorsGroupName(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,256}$',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,256}$',
        min_length=1,
        max_length=256,
    )


class FileSystemFailureDetails(BaseModel):
    Message: Optional[ErrorMessage] = None


class FileSystemId(
    RootModel[constr(pattern=r'^(fs-[0-9a-f]{8,})$', min_length=11, max_length=21)]
):
    root: constr(pattern=r'^(fs-[0-9a-f]{8,})$', min_length=11, max_length=21) = Field(
        ...,
        description='The globally unique ID of the file system, assigned by Amazon FSx.',
    )


class FileSystemIds(RootModel[List[FileSystemId]]):
    root: List[FileSystemId] = Field(
        ..., description='A list of file system IDs.', max_length=50
    )


class FileSystemLifecycle(Enum):
    AVAILABLE = 'AVAILABLE'
    CREATING = 'CREATING'
    FAILED = 'FAILED'
    DELETING = 'DELETING'
    MISCONFIGURED = 'MISCONFIGURED'
    UPDATING = 'UPDATING'
    MISCONFIGURED_UNAVAILABLE = 'MISCONFIGURED_UNAVAILABLE'


class FileSystemMaintenanceOperation(Enum):
    PATCHING = 'PATCHING'
    BACKING_UP = 'BACKING_UP'


class FileSystemMaintenanceOperations(RootModel[List[FileSystemMaintenanceOperation]]):
    root: List[FileSystemMaintenanceOperation] = Field(
        ..., description='A list of maintenance operations.', max_length=20
    )


class FileSystemNotFound(RootModel[Any]):
    root: Any


class FileSystemType(Enum):
    WINDOWS = 'WINDOWS'
    LUSTRE = 'LUSTRE'
    ONTAP = 'ONTAP'
    OPENZFS = 'OPENZFS'


class FileSystemTypeVersion(
    RootModel[constr(pattern=r'^[0-9](.[0-9]*)*$', min_length=1, max_length=20)]
):
    root: constr(pattern=r'^[0-9](.[0-9]*)*$', min_length=1, max_length=20)


class FilterName(Enum):
    file_system_id = 'file-system-id'
    backup_type = 'backup-type'
    file_system_type = 'file-system-type'
    volume_id = 'volume-id'
    data_repository_type = 'data-repository-type'
    file_cache_id = 'file-cache-id'
    file_cache_type = 'file-cache-type'


class FilterValue(
    RootModel[
        constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128
    ) = Field(..., description='The value for a filter.')


class FilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue] = Field(
        ..., description='A list of filter values.', max_length=20
    )


class Flag(RootModel[bool]):
    root: bool


class FlexCacheEndpointType(Enum):
    NONE = 'NONE'
    ORIGIN = 'ORIGIN'
    CACHE = 'CACHE'


class GeneralARN(
    RootModel[
        constr(
            pattern=r'^arn:[^:]{1,63}:[^:]{0,63}:[^:]{0,63}:(?:|\d{12}):[^/].{0,1023}$',
            min_length=8,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^arn:[^:]{1,63}:[^:]{0,63}:[^:]{0,63}:(?:|\d{12}):[^/].{0,1023}$',
        min_length=8,
        max_length=1024,
    )


class IncompatibleParameterError(RootModel[Any]):
    root: Any


class IncompatibleRegionForMultiAZ(RootModel[Any]):
    root: Any


class InputOntapVolumeType(Enum):
    RW = 'RW'
    DP = 'DP'


class IntegerNoMax(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647)


class IntegerNoMaxFromNegativeOne(RootModel[conint(ge=-1, le=2147483647)]):
    root: conint(ge=-1, le=2147483647)


class IntegerRecordSizeKiB(RootModel[conint(ge=4, le=1024)]):
    root: conint(ge=4, le=1024)


class InternalServerError(RootModel[Any]):
    root: Any


class InvalidDataRepositoryType(RootModel[Any]):
    root: Any


class InvalidDestinationKmsKey(RootModel[Any]):
    root: Any


class InvalidExportPath(RootModel[Any]):
    root: Any


class InvalidImportPath(RootModel[Any]):
    root: Any


class InvalidNetworkSettings(RootModel[Any]):
    root: Any


class InvalidPerUnitStorageThroughput(RootModel[Any]):
    root: Any


class InvalidRegion(RootModel[Any]):
    root: Any


class InvalidSourceKmsKey(RootModel[Any]):
    root: Any


class Iops(RootModel[conint(ge=0, le=1000000)]):
    root: conint(ge=0, le=1000000)


class IpAddress(
    RootModel[
        constr(
            pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$',
            min_length=7,
            max_length=15,
        )
    ]
):
    root: constr(
        pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$',
        min_length=7,
        max_length=15,
    )


class IpAddressRange(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{9,17}$',
            min_length=9,
            max_length=17,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{9,17}$', min_length=9, max_length=17
    )


class JunctionPath(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,255}$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,255}$',
        min_length=1,
        max_length=255,
    )


class KmsKeyId(
    RootModel[constr(pattern=r'^.{1,2048}$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^.{1,2048}$', min_length=1, max_length=2048) = Field(
        ...,
        description='<p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:</p> <ul> <li> <p>Amazon FSx for Lustre <code>PERSISTENT_1</code> and <code>PERSISTENT_2</code> deployment types only.</p> <p> <code>SCRATCH_1</code> and <code>SCRATCH_2</code> types are encrypted using the Amazon FSx service KMS key for your account.</p> </li> <li> <p>Amazon FSx for NetApp ONTAP</p> </li> <li> <p>Amazon FSx for OpenZFS</p> </li> <li> <p>Amazon FSx for Windows File Server</p> </li> </ul> <p>If a <code>KmsKeyId</code> isn\'t specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>',
    )


class LastUpdatedTime(RootModel[datetime]):
    root: datetime


class LifecycleTransitionReason(BaseModel):
    Message: Optional[ErrorMessage] = None


class LimitedMaxResults(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class LustreAccessAuditLogLevel(Enum):
    DISABLED = 'DISABLED'
    WARN_ONLY = 'WARN_ONLY'
    ERROR_ONLY = 'ERROR_ONLY'
    WARN_ERROR = 'WARN_ERROR'


class LustreDeploymentType(Enum):
    SCRATCH_1 = 'SCRATCH_1'
    SCRATCH_2 = 'SCRATCH_2'
    PERSISTENT_1 = 'PERSISTENT_1'
    PERSISTENT_2 = 'PERSISTENT_2'


class LustreFileSystemMountName(
    RootModel[constr(pattern=r'^([A-Za-z0-9_-]{1,8})$', min_length=1, max_length=8)]
):
    root: constr(pattern=r'^([A-Za-z0-9_-]{1,8})$', min_length=1, max_length=8)


class LustreLogConfiguration(BaseModel):
    Destination: Optional[GeneralARN] = None
    Level: LustreAccessAuditLogLevel


class LustreLogCreateConfiguration(BaseModel):
    Destination: Optional[GeneralARN] = None
    Level: LustreAccessAuditLogLevel


class LustreNoSquashNid(
    RootModel[
        constr(
            pattern=r'^([0-9\[\]\-]*\.){3}([0-9\[\]\-]*)@tcp$',
            min_length=11,
            max_length=43,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9\[\]\-]*\.){3}([0-9\[\]\-]*)@tcp$', min_length=11, max_length=43
    )


class LustreNoSquashNids(RootModel[List[LustreNoSquashNid]]):
    root: List[LustreNoSquashNid] = Field(..., max_length=64)


class LustreRootSquash(
    RootModel[
        constr(pattern=r'^([0-9]{1,10}):([0-9]{1,10})$', min_length=3, max_length=21)
    ]
):
    root: constr(pattern=r'^([0-9]{1,10}):([0-9]{1,10})$', min_length=3, max_length=21)


class LustreRootSquashConfiguration(BaseModel):
    NoSquashNids: Optional[LustreNoSquashNids] = None
    RootSquash: Optional[LustreRootSquash] = None


class MaxResults(RootModel[conint(ge=1, le=2147483647)]):
    root: conint(ge=1, le=2147483647) = Field(
        ...,
        description='The maximum number of resources to return in the response. This value must be an integer greater than zero.',
    )


class Megabytes(RootModel[conint(ge=1, le=512000)]):
    root: conint(ge=1, le=512000)


class MegabytesPerSecond(RootModel[conint(ge=8, le=100000)]):
    root: conint(ge=8, le=100000) = Field(
        ...,
        description='The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).',
    )


class MetadataStorageCapacity(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647)


class MissingFileCacheConfiguration(RootModel[Any]):
    root: Any


class MissingFileSystemConfiguration(RootModel[Any]):
    root: Any


class MissingVolumeConfiguration(RootModel[Any]):
    root: Any


class Namespace(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,4096}$',
            min_length=1,
            max_length=4096,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,4096}$',
        min_length=1,
        max_length=4096,
    )


class NetBiosAlias(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,255}$',
            min_length=1,
            max_length=15,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,255}$', min_length=1, max_length=15
    )


class NetworkInterfaceId(
    RootModel[constr(pattern=r'^(eni-[0-9a-f]{8,})$', min_length=12, max_length=21)]
):
    root: constr(pattern=r'^(eni-[0-9a-f]{8,})$', min_length=12, max_length=21) = Field(
        ...,
        description='An elastic network interface ID. An elastic network interface is a logical networking component in a virtual private cloud (VPC) that represents a virtual network card. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic Network Interfaces</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.',
    )


class NetworkInterfaceIds(RootModel[List[NetworkInterfaceId]]):
    root: List[NetworkInterfaceId] = Field(
        ..., description='A list of network interface IDs.', max_length=50
    )


class NextToken(
    RootModel[
        constr(
            pattern=r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$',
        min_length=1,
        max_length=255,
    ) = Field(
        ...,
        description='(Optional) Opaque pagination token returned from a previous operation (String). If present, this token indicates from what point you can continue processing the request, where the previous <code>NextToken</code> value left off.',
    )


class NfsVersion(Enum):
    NFS3 = 'NFS3'


class NotServiceResourceError(RootModel[Any]):
    root: Any


class OntapDeploymentType(Enum):
    MULTI_AZ_1 = 'MULTI_AZ_1'
    SINGLE_AZ_1 = 'SINGLE_AZ_1'


class OntapEndpointIpAddresses(RootModel[List[IpAddress]]):
    root: List[IpAddress] = Field(..., max_length=2, min_length=1)


class OntapVolumeType(Enum):
    RW = 'RW'
    DP = 'DP'
    LS = 'LS'


class OpenZFSClients(
    RootModel[constr(pattern=r'^[ -~]{1,128}$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[ -~]{1,128}$', min_length=1, max_length=128)


class OpenZFSCopyStrategy(Enum):
    CLONE = 'CLONE'
    FULL_COPY = 'FULL_COPY'


class OpenZFSDataCompressionType(Enum):
    NONE = 'NONE'
    ZSTD = 'ZSTD'
    LZ4 = 'LZ4'


class OpenZFSDeploymentType(Enum):
    SINGLE_AZ_1 = 'SINGLE_AZ_1'
    SINGLE_AZ_2 = 'SINGLE_AZ_2'


class OpenZFSNfsExportOption(
    RootModel[constr(pattern=r'^[ -~]{1,128}$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[ -~]{1,128}$', min_length=1, max_length=128)


class OpenZFSNfsExportOptions(RootModel[List[OpenZFSNfsExportOption]]):
    root: List[OpenZFSNfsExportOption] = Field(..., max_length=20, min_length=1)


class OpenZFSQuotaType(Enum):
    USER = 'USER'
    GROUP = 'GROUP'


class OpenZFSUserOrGroupQuota(BaseModel):
    Id: IntegerNoMax
    StorageCapacityQuotaGiB: IntegerNoMax
    Type: OpenZFSQuotaType


class OrganizationalUnitDistinguishedName(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,2000}$',
            min_length=1,
            max_length=2000,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,2000}$',
        min_length=1,
        max_length=2000,
    )


class PerUnitStorageThroughput(RootModel[conint(ge=12, le=1000)]):
    root: conint(ge=12, le=1000)


class ProgressPercent(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100) = Field(
        ..., description='The current percent of progress of an asynchronous task.'
    )


class ReadOnly(RootModel[bool]):
    root: bool


class Region(
    RootModel[constr(pattern=r'^[a-z0-9-]{1,20}$', min_length=1, max_length=20)]
):
    root: constr(pattern=r'^[a-z0-9-]{1,20}$', min_length=1, max_length=20)


class ReleaseFileSystemNfsV3LocksRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')


class ReleasedCapacity(RootModel[int]):
    root: int


class ReportFormat(Enum):
    REPORT_CSV_20191124 = 'REPORT_CSV_20191124'


class ReportScope(Enum):
    FAILED_FILES_ONLY = 'FAILED_FILES_ONLY'


class RepositoryDnsIps(RootModel[List[IpAddress]]):
    root: List[IpAddress] = Field(..., max_length=10)


class RequestTime(RootModel[datetime]):
    root: datetime


class ResourceARN(
    RootModel[
        constr(
            pattern=r'^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!/).{0,1024}$',
            min_length=8,
            max_length=512,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^arn:(?=[^:]+:fsx:[^:]+:\d{12}:)((|(?=[a-z0-9-.]{1,63})(?!\d{1,3}(\.\d{1,3}){3})(?![^:]*-{2})(?![^:]*-\.)(?![^:]*\.-)[a-z0-9].*(?<!-)):){4}(?!/).{0,1024}$',
        min_length=8,
        max_length=512,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.',
    )


class ResourceDoesNotSupportTagging(RootModel[Any]):
    root: Any


class ResourceNotFound(RootModel[Any]):
    root: Any


class ResourceType(Enum):
    FILE_SYSTEM = 'FILE_SYSTEM'
    VOLUME = 'VOLUME'


class RestoreOpenZFSVolumeOption(Enum):
    DELETE_INTERMEDIATE_SNAPSHOTS = 'DELETE_INTERMEDIATE_SNAPSHOTS'
    DELETE_CLONED_VOLUMES = 'DELETE_CLONED_VOLUMES'


class RestoreOpenZFSVolumeOptions(RootModel[List[RestoreOpenZFSVolumeOption]]):
    root: List[RestoreOpenZFSVolumeOption] = Field(..., max_length=2)


class RouteTableId(
    RootModel[constr(pattern=r'^(rtb-[0-9a-f]{8,})$', min_length=12, max_length=21)]
):
    root: constr(pattern=r'^(rtb-[0-9a-f]{8,})$', min_length=12, max_length=21)


class RouteTableIds(RootModel[List[RouteTableId]]):
    root: List[RouteTableId] = Field(..., max_length=50)


class SecurityGroupId(
    RootModel[constr(pattern=r'^(sg-[0-9a-f]{8,})$', min_length=11, max_length=20)]
):
    root: constr(pattern=r'^(sg-[0-9a-f]{8,})$', min_length=11, max_length=20) = Field(
        ...,
        description='The ID of your Amazon EC2 security group. This ID is used to control network access to the endpoint that Amazon FSx creates on your behalf in each subnet. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security groups for Linux instances</a> in the <i>Amazon EC2 User Guide</i>.',
    )


class SecurityGroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(
        ...,
        description="A list of IDs specifying the security groups to apply to all network interfaces created for file system access. This list isn't returned in later requests to describe the file system.",
        max_length=50,
    )


class SecurityStyle(Enum):
    UNIX = 'UNIX'
    NTFS = 'NTFS'
    MIXED = 'MIXED'


class ServiceLimitExceeded(RootModel[Any]):
    root: Any


class SnapshotFilterName(Enum):
    file_system_id = 'file-system-id'
    volume_id = 'volume-id'


class SnapshotFilterValue(
    RootModel[
        constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128)


class SnapshotFilterValues(RootModel[List[SnapshotFilterValue]]):
    root: List[SnapshotFilterValue] = Field(..., max_length=20)


class SnapshotId(
    RootModel[
        constr(pattern=r'^((fs)?volsnap-[0-9a-f]{8,})$', min_length=11, max_length=28)
    ]
):
    root: constr(pattern=r'^((fs)?volsnap-[0-9a-f]{8,})$', min_length=11, max_length=28)


class SnapshotIds(RootModel[List[SnapshotId]]):
    root: List[SnapshotId] = Field(..., max_length=50)


class SnapshotLifecycle(Enum):
    PENDING = 'PENDING'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    AVAILABLE = 'AVAILABLE'


class SnapshotName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_:.-]{1,203}$', min_length=1, max_length=203)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_:.-]{1,203}$', min_length=1, max_length=203)


class SnapshotNotFound(RootModel[Any]):
    root: Any


class SnapshotPolicy(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class SourceBackupId(
    RootModel[constr(pattern=r'^(backup-[0-9a-f]{8,})$', min_length=12, max_length=128)]
):
    root: constr(pattern=r'^(backup-[0-9a-f]{8,})$', min_length=12, max_length=128)


class SourceBackupUnavailable(RootModel[Any]):
    root: Any


class StartTime(RootModel[datetime]):
    root: datetime


class Status(Enum):
    FAILED = 'FAILED'
    IN_PROGRESS = 'IN_PROGRESS'
    PENDING = 'PENDING'
    COMPLETED = 'COMPLETED'
    UPDATED_OPTIMIZING = 'UPDATED_OPTIMIZING'


class StorageCapacity(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647) = Field(
        ...,
        description='The storage capacity for your Amazon FSx file system, in gibibytes.',
    )


class StorageType(Enum):
    SSD = 'SSD'
    HDD = 'HDD'


class StorageVirtualMachineFilterName(Enum):
    file_system_id = 'file-system-id'


class StorageVirtualMachineFilterValue(
    RootModel[
        constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128)


class StorageVirtualMachineFilterValues(
    RootModel[List[StorageVirtualMachineFilterValue]]
):
    root: List[StorageVirtualMachineFilterValue] = Field(..., max_length=20)


class StorageVirtualMachineId(
    RootModel[constr(pattern=r'^(svm-[0-9a-f]{17,})$', min_length=21, max_length=21)]
):
    root: constr(pattern=r'^(svm-[0-9a-f]{17,})$', min_length=21, max_length=21)


class StorageVirtualMachineIds(RootModel[List[StorageVirtualMachineId]]):
    root: List[StorageVirtualMachineId] = Field(..., max_length=50)


class StorageVirtualMachineLifecycle(Enum):
    CREATED = 'CREATED'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    MISCONFIGURED = 'MISCONFIGURED'
    PENDING = 'PENDING'


class StorageVirtualMachineName(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,47}$',
            min_length=1,
            max_length=47,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,47}$', min_length=1, max_length=47
    )


class StorageVirtualMachineNotFound(RootModel[Any]):
    root: Any


class StorageVirtualMachineRootVolumeSecurityStyle(Enum):
    UNIX = 'UNIX'
    NTFS = 'NTFS'
    MIXED = 'MIXED'


class StorageVirtualMachineSubtype(Enum):
    DEFAULT = 'DEFAULT'
    DP_DESTINATION = 'DP_DESTINATION'
    SYNC_DESTINATION = 'SYNC_DESTINATION'
    SYNC_SOURCE = 'SYNC_SOURCE'


class SubDirectoriesPaths(RootModel[List[Namespace]]):
    root: List[Namespace] = Field(..., max_length=500)


class SubnetId(
    RootModel[constr(pattern=r'^(subnet-[0-9a-f]{8,})$', min_length=15, max_length=24)]
):
    root: constr(pattern=r'^(subnet-[0-9a-f]{8,})$', min_length=15, max_length=24) = (
        Field(
            ...,
            description='The ID for a subnet. A <i>subnet</i> is a range of IP addresses in your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide.</i> ',
        )
    )


class SubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId] = Field(
        ...,
        description='A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.',
        max_length=50,
    )


class SucceededCount(RootModel[int]):
    root: int


class SvmEndpoint(BaseModel):
    DNSName_1: Optional[DNSName] = Field(None, alias='DNSName')
    IpAddresses: Optional[OntapEndpointIpAddresses] = None


class SvmEndpoints(BaseModel):
    Iscsi: Optional[SvmEndpoint] = None
    Management: Optional[SvmEndpoint] = None
    Nfs: Optional[SvmEndpoint] = None
    Smb: Optional[SvmEndpoint] = None


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    ) = Field(
        ...,
        description='A string of 1 to 128 characters that specifies the key for a tag. Tag keys must be unique for the resource to which they are attached.',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(
        ...,
        description='A list of <code>TagKey</code> values, with a maximum of 50 elements.',
        max_length=50,
        min_length=1,
    )


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    ) = Field(
        ...,
        description="A string of 0 to 256 characters that specifies the value for a tag. Tag values can be null and don't have to be unique in a tag set.",
    )


class TaskId(
    RootModel[constr(pattern=r'^(task-[0-9a-f]{17,})$', min_length=12, max_length=128)]
):
    root: constr(pattern=r'^(task-[0-9a-f]{17,})$', min_length=12, max_length=128)


class TaskIds(RootModel[List[TaskId]]):
    root: List[TaskId] = Field(..., max_length=50)


class TieringPolicyName(Enum):
    SNAPSHOT_ONLY = 'SNAPSHOT_ONLY'
    AUTO = 'AUTO'
    ALL = 'ALL'
    NONE = 'NONE'


class TotalCount(RootModel[int]):
    root: int


class UUID(
    RootModel[constr(pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,36}$', max_length=36)]
):
    root: constr(pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,36}$', max_length=36)


class UnsupportedOperation(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    TagKeys_1: TagKeys = Field(..., alias='TagKeys')


class UntagResourceResponse(BaseModel):
    pass


class UpdateSnapshotRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Name: SnapshotName
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')


class VolumeCapacity(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647)


class VolumeFilterName(Enum):
    file_system_id = 'file-system-id'
    storage_virtual_machine_id = 'storage-virtual-machine-id'


class VolumeFilterValue(
    RootModel[
        constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?\-\_]*$', min_length=1, max_length=128)


class VolumeFilterValues(RootModel[List[VolumeFilterValue]]):
    root: List[VolumeFilterValue] = Field(..., max_length=20)


class VolumeId(
    RootModel[constr(pattern=r'^(fsvol-[0-9a-f]{17,})$', min_length=23, max_length=23)]
):
    root: constr(pattern=r'^(fsvol-[0-9a-f]{17,})$', min_length=23, max_length=23)


class VolumeIds(RootModel[List[VolumeId]]):
    root: List[VolumeId] = Field(..., max_length=50)


class VolumeLifecycle(Enum):
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    MISCONFIGURED = 'MISCONFIGURED'
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'


class VolumeName(
    RootModel[
        constr(
            pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,203}$',
            min_length=1,
            max_length=203,
        )
    ]
):
    root: constr(
        pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,203}$',
        min_length=1,
        max_length=203,
    )


class VolumeNotFound(RootModel[Any]):
    root: Any


class VolumePath(
    RootModel[
        constr(pattern=r'^[A-za-z0-9\_\.\:\-\/]*$', min_length=1, max_length=2048)
    ]
):
    root: constr(pattern=r'^[A-za-z0-9\_\.\:\-\/]*$', min_length=1, max_length=2048)


class VolumeType(Enum):
    ONTAP = 'ONTAP'
    OPENZFS = 'OPENZFS'


class VpcId(
    RootModel[constr(pattern=r'^(vpc-[0-9a-f]{8,})$', min_length=12, max_length=21)]
):
    root: constr(pattern=r'^(vpc-[0-9a-f]{8,})$', min_length=12, max_length=21) = Field(
        ...,
        description='The ID of your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">VPC and subnets</a> in the <i>Amazon VPC User Guide</i>.',
    )


class WeeklyTime(
    RootModel[
        constr(
            pattern=r'^[1-7]:([01]\d|2[0-3]):?([0-5]\d)$', min_length=7, max_length=7
        )
    ]
):
    root: constr(
        pattern=r'^[1-7]:([01]\d|2[0-3]):?([0-5]\d)$', min_length=7, max_length=7
    ) = Field(
        ...,
        description='<p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p> <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href="https://en.wikipedia.org/wiki/ISO_week_date">the ISO-8601 spec as described on Wikipedia</a>.</p> <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p> <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>',
    )


class WindowsAccessAuditLogLevel(Enum):
    DISABLED = 'DISABLED'
    SUCCESS_ONLY = 'SUCCESS_ONLY'
    FAILURE_ONLY = 'FAILURE_ONLY'
    SUCCESS_AND_FAILURE = 'SUCCESS_AND_FAILURE'


class WindowsAuditLogConfiguration(BaseModel):
    AuditLogDestination: Optional[GeneralARN] = None
    FileAccessAuditLogLevel: WindowsAccessAuditLogLevel
    FileShareAccessAuditLogLevel: WindowsAccessAuditLogLevel


class WindowsAuditLogCreateConfiguration(BaseModel):
    AuditLogDestination: Optional[GeneralARN] = None
    FileAccessAuditLogLevel: WindowsAccessAuditLogLevel
    FileShareAccessAuditLogLevel: WindowsAccessAuditLogLevel


class WindowsDeploymentType(Enum):
    MULTI_AZ_1 = 'MULTI_AZ_1'
    SINGLE_AZ_1 = 'SINGLE_AZ_1'
    SINGLE_AZ_2 = 'SINGLE_AZ_2'


class XAmzTarget(Enum):
    AWSSimbaAPIService_v20180301_AssociateFileSystemAliases = (
        'AWSSimbaAPIService_v20180301.AssociateFileSystemAliases'
    )


class XAmzTarget1(Enum):
    AWSSimbaAPIService_v20180301_CancelDataRepositoryTask = (
        'AWSSimbaAPIService_v20180301.CancelDataRepositoryTask'
    )


class XAmzTarget2(Enum):
    AWSSimbaAPIService_v20180301_CopyBackup = 'AWSSimbaAPIService_v20180301.CopyBackup'


class XAmzTarget3(Enum):
    AWSSimbaAPIService_v20180301_CreateBackup = (
        'AWSSimbaAPIService_v20180301.CreateBackup'
    )


class XAmzTarget4(Enum):
    AWSSimbaAPIService_v20180301_CreateDataRepositoryAssociation = (
        'AWSSimbaAPIService_v20180301.CreateDataRepositoryAssociation'
    )


class XAmzTarget5(Enum):
    AWSSimbaAPIService_v20180301_CreateDataRepositoryTask = (
        'AWSSimbaAPIService_v20180301.CreateDataRepositoryTask'
    )


class XAmzTarget6(Enum):
    AWSSimbaAPIService_v20180301_CreateFileCache = (
        'AWSSimbaAPIService_v20180301.CreateFileCache'
    )


class XAmzTarget7(Enum):
    AWSSimbaAPIService_v20180301_CreateFileSystem = (
        'AWSSimbaAPIService_v20180301.CreateFileSystem'
    )


class XAmzTarget8(Enum):
    AWSSimbaAPIService_v20180301_CreateFileSystemFromBackup = (
        'AWSSimbaAPIService_v20180301.CreateFileSystemFromBackup'
    )


class XAmzTarget9(Enum):
    AWSSimbaAPIService_v20180301_CreateSnapshot = (
        'AWSSimbaAPIService_v20180301.CreateSnapshot'
    )


class XAmzTarget10(Enum):
    AWSSimbaAPIService_v20180301_CreateStorageVirtualMachine = (
        'AWSSimbaAPIService_v20180301.CreateStorageVirtualMachine'
    )


class XAmzTarget11(Enum):
    AWSSimbaAPIService_v20180301_CreateVolume = (
        'AWSSimbaAPIService_v20180301.CreateVolume'
    )


class XAmzTarget12(Enum):
    AWSSimbaAPIService_v20180301_CreateVolumeFromBackup = (
        'AWSSimbaAPIService_v20180301.CreateVolumeFromBackup'
    )


class XAmzTarget13(Enum):
    AWSSimbaAPIService_v20180301_DeleteBackup = (
        'AWSSimbaAPIService_v20180301.DeleteBackup'
    )


class XAmzTarget14(Enum):
    AWSSimbaAPIService_v20180301_DeleteDataRepositoryAssociation = (
        'AWSSimbaAPIService_v20180301.DeleteDataRepositoryAssociation'
    )


class XAmzTarget15(Enum):
    AWSSimbaAPIService_v20180301_DeleteFileCache = (
        'AWSSimbaAPIService_v20180301.DeleteFileCache'
    )


class XAmzTarget16(Enum):
    AWSSimbaAPIService_v20180301_DeleteFileSystem = (
        'AWSSimbaAPIService_v20180301.DeleteFileSystem'
    )


class XAmzTarget17(Enum):
    AWSSimbaAPIService_v20180301_DeleteSnapshot = (
        'AWSSimbaAPIService_v20180301.DeleteSnapshot'
    )


class XAmzTarget18(Enum):
    AWSSimbaAPIService_v20180301_DeleteStorageVirtualMachine = (
        'AWSSimbaAPIService_v20180301.DeleteStorageVirtualMachine'
    )


class XAmzTarget19(Enum):
    AWSSimbaAPIService_v20180301_DeleteVolume = (
        'AWSSimbaAPIService_v20180301.DeleteVolume'
    )


class XAmzTarget20(Enum):
    AWSSimbaAPIService_v20180301_DescribeBackups = (
        'AWSSimbaAPIService_v20180301.DescribeBackups'
    )


class XAmzTarget21(Enum):
    AWSSimbaAPIService_v20180301_DescribeDataRepositoryAssociations = (
        'AWSSimbaAPIService_v20180301.DescribeDataRepositoryAssociations'
    )


class XAmzTarget22(Enum):
    AWSSimbaAPIService_v20180301_DescribeDataRepositoryTasks = (
        'AWSSimbaAPIService_v20180301.DescribeDataRepositoryTasks'
    )


class XAmzTarget23(Enum):
    AWSSimbaAPIService_v20180301_DescribeFileCaches = (
        'AWSSimbaAPIService_v20180301.DescribeFileCaches'
    )


class XAmzTarget24(Enum):
    AWSSimbaAPIService_v20180301_DescribeFileSystemAliases = (
        'AWSSimbaAPIService_v20180301.DescribeFileSystemAliases'
    )


class XAmzTarget25(Enum):
    AWSSimbaAPIService_v20180301_DescribeFileSystems = (
        'AWSSimbaAPIService_v20180301.DescribeFileSystems'
    )


class XAmzTarget26(Enum):
    AWSSimbaAPIService_v20180301_DescribeSnapshots = (
        'AWSSimbaAPIService_v20180301.DescribeSnapshots'
    )


class XAmzTarget27(Enum):
    AWSSimbaAPIService_v20180301_DescribeStorageVirtualMachines = (
        'AWSSimbaAPIService_v20180301.DescribeStorageVirtualMachines'
    )


class XAmzTarget28(Enum):
    AWSSimbaAPIService_v20180301_DescribeVolumes = (
        'AWSSimbaAPIService_v20180301.DescribeVolumes'
    )


class XAmzTarget29(Enum):
    AWSSimbaAPIService_v20180301_DisassociateFileSystemAliases = (
        'AWSSimbaAPIService_v20180301.DisassociateFileSystemAliases'
    )


class XAmzTarget30(Enum):
    AWSSimbaAPIService_v20180301_ListTagsForResource = (
        'AWSSimbaAPIService_v20180301.ListTagsForResource'
    )


class XAmzTarget31(Enum):
    AWSSimbaAPIService_v20180301_ReleaseFileSystemNfsV3Locks = (
        'AWSSimbaAPIService_v20180301.ReleaseFileSystemNfsV3Locks'
    )


class XAmzTarget32(Enum):
    AWSSimbaAPIService_v20180301_RestoreVolumeFromSnapshot = (
        'AWSSimbaAPIService_v20180301.RestoreVolumeFromSnapshot'
    )


class XAmzTarget33(Enum):
    AWSSimbaAPIService_v20180301_TagResource = (
        'AWSSimbaAPIService_v20180301.TagResource'
    )


class XAmzTarget34(Enum):
    AWSSimbaAPIService_v20180301_UntagResource = (
        'AWSSimbaAPIService_v20180301.UntagResource'
    )


class XAmzTarget35(Enum):
    AWSSimbaAPIService_v20180301_UpdateDataRepositoryAssociation = (
        'AWSSimbaAPIService_v20180301.UpdateDataRepositoryAssociation'
    )


class XAmzTarget36(Enum):
    AWSSimbaAPIService_v20180301_UpdateFileCache = (
        'AWSSimbaAPIService_v20180301.UpdateFileCache'
    )


class XAmzTarget37(Enum):
    AWSSimbaAPIService_v20180301_UpdateFileSystem = (
        'AWSSimbaAPIService_v20180301.UpdateFileSystem'
    )


class XAmzTarget38(Enum):
    AWSSimbaAPIService_v20180301_UpdateSnapshot = (
        'AWSSimbaAPIService_v20180301.UpdateSnapshot'
    )


class XAmzTarget39(Enum):
    AWSSimbaAPIService_v20180301_UpdateStorageVirtualMachine = (
        'AWSSimbaAPIService_v20180301.UpdateStorageVirtualMachine'
    )


class XAmzTarget40(Enum):
    AWSSimbaAPIService_v20180301_UpdateVolume = (
        'AWSSimbaAPIService_v20180301.UpdateVolume'
    )


class ActiveDirectoryBackupAttributes(BaseModel):
    ActiveDirectoryId: Optional[DirectoryId] = None
    DomainName: Optional[ActiveDirectoryFullyQualifiedName] = None
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')


class AdministrativeActionFailureDetails(BaseModel):
    Message: Optional[ErrorMessage] = None


class Alias(BaseModel):
    Lifecycle: Optional[AliasLifecycle] = None
    Name: Optional[AlternateDNSName] = None


class Aliases(RootModel[List[Alias]]):
    root: List[Alias] = Field(
        ...,
        description='An array of one or more DNS aliases that are currently associated with the Amazon FSx file system. Aliases allow you to use existing DNS names to access the data in your Amazon FSx file system. You can associate up to 50 aliases with a file system at any time. You can associate additional DNS aliases after you create the file system using the AssociateFileSystemAliases operation. You can remove DNS aliases from the file system after it is created using the DisassociateFileSystemAliases operation. You only need to specify the alias name in the request payload. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/WindowsGuide/managing-dns-aliases.html">DNS aliases</a>.',
        max_length=50,
    )


class AssociateFileSystemAliasesRequest(BaseModel):
    Aliases: AlternateDNSNames
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')


class AssociateFileSystemAliasesResponse(BaseModel):
    Aliases_1: Optional[Aliases] = Field(None, alias='Aliases')


class AutoExportPolicy(BaseModel):
    Events: Optional[EventTypes] = None


class AutoImportPolicy(BaseModel):
    Events: Optional[EventTypes] = None


class BackupFailureDetails(BaseModel):
    Message: Optional[ErrorMessage] = None


class CancelDataRepositoryTaskRequest(BaseModel):
    TaskId_1: TaskId = Field(..., alias='TaskId')


class CancelDataRepositoryTaskResponse(BaseModel):
    Lifecycle: Optional[DataRepositoryTaskLifecycle] = None
    TaskId_1: Optional[TaskId] = Field(None, alias='TaskId')


class CompletionReport(BaseModel):
    Enabled: Flag
    Format: Optional[ReportFormat] = None
    Path: Optional[ArchivePath] = None
    Scope: Optional[ReportScope] = None


class CreateFileSystemLustreConfiguration(BaseModel):
    AutoImportPolicy: Optional[AutoImportPolicyType] = None
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    CopyTagsToBackups: Optional[Flag] = None
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DataCompressionType_1: Optional[DataCompressionType] = Field(
        None, alias='DataCompressionType'
    )
    DeploymentType: Optional[LustreDeploymentType] = None
    DriveCacheType_1: Optional[DriveCacheType] = Field(None, alias='DriveCacheType')
    ExportPath: Optional[ArchivePath] = None
    ImportPath: Optional[ArchivePath] = None
    ImportedFileChunkSize: Optional[Megabytes] = None
    LogConfiguration: Optional[LustreLogCreateConfiguration] = None
    PerUnitStorageThroughput_1: Optional[PerUnitStorageThroughput] = Field(
        None, alias='PerUnitStorageThroughput'
    )
    RootSquashConfiguration: Optional[LustreRootSquashConfiguration] = None
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class CreateOpenZFSOriginSnapshotConfiguration(BaseModel):
    CopyStrategy: OpenZFSCopyStrategy
    SnapshotARN: ResourceARN


class DataRepositoryFailureDetails(BaseModel):
    Message: Optional[ErrorMessage] = None


class DataRepositoryTaskFailureDetails(BaseModel):
    Message: Optional[ErrorMessage] = None


class DataRepositoryTaskFilter(BaseModel):
    Name: Optional[DataRepositoryTaskFilterName] = None
    Values: Optional[DataRepositoryTaskFilterValues] = None


class DataRepositoryTaskFilters(RootModel[List[DataRepositoryTaskFilter]]):
    root: List[DataRepositoryTaskFilter] = Field(..., max_length=3)


class DataRepositoryTaskStatus(BaseModel):
    FailedCount_1: Optional[FailedCount] = Field(None, alias='FailedCount')
    LastUpdatedTime_1: Optional[LastUpdatedTime] = Field(None, alias='LastUpdatedTime')
    ReleasedCapacity_1: Optional[ReleasedCapacity] = Field(
        None, alias='ReleasedCapacity'
    )
    SucceededCount_1: Optional[SucceededCount] = Field(None, alias='SucceededCount')
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')


class DeleteFileCacheRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileCacheId_1: FileCacheId = Field(..., alias='FileCacheId')


class DeleteFileCacheResponse(BaseModel):
    FileCacheId_1: Optional[FileCacheId] = Field(None, alias='FileCacheId')
    Lifecycle: Optional[FileCacheLifecycle] = None


class DeleteSnapshotRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')


class DeleteSnapshotResponse(BaseModel):
    Lifecycle: Optional[SnapshotLifecycle] = None
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')


class DeleteStorageVirtualMachineRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    StorageVirtualMachineId_1: StorageVirtualMachineId = Field(
        ..., alias='StorageVirtualMachineId'
    )


class DeleteStorageVirtualMachineResponse(BaseModel):
    Lifecycle: Optional[StorageVirtualMachineLifecycle] = None
    StorageVirtualMachineId_1: Optional[StorageVirtualMachineId] = Field(
        None, alias='StorageVirtualMachineId'
    )


class DescribeDataRepositoryTasksRequest(BaseModel):
    Filters: Optional[DataRepositoryTaskFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TaskIds_1: Optional[TaskIds] = Field(None, alias='TaskIds')


class DescribeFileCachesRequest(BaseModel):
    FileCacheIds_1: Optional[FileCacheIds] = Field(None, alias='FileCacheIds')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFileSystemAliasesRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFileSystemAliasesResponse(BaseModel):
    Aliases_1: Optional[Aliases] = Field(None, alias='Aliases')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFileSystemsRequest(BaseModel):
    FileSystemIds_1: Optional[FileSystemIds] = Field(None, alias='FileSystemIds')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DisassociateFileSystemAliasesRequest(BaseModel):
    Aliases: AlternateDNSNames
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')


class DisassociateFileSystemAliasesResponse(BaseModel):
    Aliases_1: Optional[Aliases] = Field(None, alias='Aliases')


class DiskIopsConfiguration(BaseModel):
    Iops_1: Optional[Iops] = Field(None, alias='Iops')
    Mode: Optional[DiskIopsConfigurationMode] = None


class DnsIps(RootModel[List[IpAddress]]):
    root: List[IpAddress] = Field(..., max_length=3, min_length=1)


class FileCacheLustreMetadataConfiguration(BaseModel):
    StorageCapacity: MetadataStorageCapacity


class FileCacheNFSConfiguration(BaseModel):
    DnsIps: Optional[RepositoryDnsIps] = None
    Version: NfsVersion


class FileSystemEndpoint(BaseModel):
    DNSName_1: Optional[DNSName] = Field(None, alias='DNSName')
    IpAddresses: Optional[OntapEndpointIpAddresses] = None


class FileSystemEndpoints(BaseModel):
    Intercluster: Optional[FileSystemEndpoint] = None
    Management: Optional[FileSystemEndpoint] = None


class Filter(BaseModel):
    Name: Optional[FilterName] = None
    Values: Optional[FilterValues] = None


class Filters(RootModel[List[Filter]]):
    root: List[Filter] = Field(
        ..., description='A list of <code>Filter</code> elements.', max_length=10
    )


class ListTagsForResourceRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')


class NFSDataRepositoryConfiguration(BaseModel):
    AutoExportPolicy_1: Optional[AutoExportPolicy] = Field(
        None, alias='AutoExportPolicy'
    )
    DnsIps: Optional[RepositoryDnsIps] = None
    Version: NfsVersion


class OntapFileSystemConfiguration(BaseModel):
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DeploymentType: Optional[OntapDeploymentType] = None
    DiskIopsConfiguration_1: Optional[DiskIopsConfiguration] = Field(
        None, alias='DiskIopsConfiguration'
    )
    EndpointIpAddressRange: Optional[IpAddressRange] = None
    Endpoints: Optional[FileSystemEndpoints] = None
    PreferredSubnetId: Optional[SubnetId] = None
    RouteTableIds_1: Optional[RouteTableIds] = Field(None, alias='RouteTableIds')
    ThroughputCapacity: Optional[MegabytesPerSecond] = None
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class OpenZFSClientConfiguration(BaseModel):
    Clients: OpenZFSClients
    Options: OpenZFSNfsExportOptions


class OpenZFSClientConfigurations(RootModel[List[OpenZFSClientConfiguration]]):
    root: List[OpenZFSClientConfiguration] = Field(..., max_length=25)


class OpenZFSFileSystemConfiguration(BaseModel):
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    CopyTagsToBackups: Optional[Flag] = None
    CopyTagsToVolumes: Optional[Flag] = None
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DeploymentType: Optional[OpenZFSDeploymentType] = None
    DiskIopsConfiguration_1: Optional[DiskIopsConfiguration] = Field(
        None, alias='DiskIopsConfiguration'
    )
    RootVolumeId: Optional[VolumeId] = None
    ThroughputCapacity: Optional[MegabytesPerSecond] = None
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class OpenZFSNfsExport(BaseModel):
    ClientConfigurations: OpenZFSClientConfigurations


class OpenZFSNfsExports(RootModel[List[OpenZFSNfsExport]]):
    root: List[OpenZFSNfsExport] = Field(..., max_length=1)


class OpenZFSOriginSnapshotConfiguration(BaseModel):
    CopyStrategy: Optional[OpenZFSCopyStrategy] = None
    SnapshotARN: Optional[ResourceARN] = None


class OpenZFSUserAndGroupQuotas(RootModel[List[OpenZFSUserOrGroupQuota]]):
    root: List[OpenZFSUserOrGroupQuota] = Field(..., max_length=500)


class OpenZFSVolumeConfiguration(BaseModel):
    CopyTagsToSnapshots: Optional[Flag] = None
    DataCompressionType: Optional[OpenZFSDataCompressionType] = None
    DeleteClonedVolumes: Optional[Flag] = None
    DeleteIntermediateSnaphots: Optional[Flag] = None
    NfsExports: Optional[OpenZFSNfsExports] = None
    OriginSnapshot: Optional[OpenZFSOriginSnapshotConfiguration] = None
    ParentVolumeId: Optional[VolumeId] = None
    ReadOnly_1: Optional[ReadOnly] = Field(None, alias='ReadOnly')
    RecordSizeKiB: Optional[IntegerRecordSizeKiB] = None
    RestoreToSnapshot: Optional[SnapshotId] = None
    StorageCapacityQuotaGiB: Optional[IntegerNoMax] = None
    StorageCapacityReservationGiB: Optional[IntegerNoMax] = None
    UserAndGroupQuotas: Optional[OpenZFSUserAndGroupQuotas] = None
    VolumePath_1: Optional[VolumePath] = Field(None, alias='VolumePath')


class RestoreVolumeFromSnapshotRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Options: Optional[RestoreOpenZFSVolumeOptions] = None
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class S3DataRepositoryConfiguration(BaseModel):
    AutoExportPolicy_1: Optional[AutoExportPolicy] = Field(
        None, alias='AutoExportPolicy'
    )
    AutoImportPolicy_1: Optional[AutoImportPolicy] = Field(
        None, alias='AutoImportPolicy'
    )


class SelfManagedActiveDirectoryAttributes(BaseModel):
    DnsIps_1: Optional[DnsIps] = Field(None, alias='DnsIps')
    DomainName: Optional[ActiveDirectoryFullyQualifiedName] = None
    FileSystemAdministratorsGroup: Optional[FileSystemAdministratorsGroupName] = None
    OrganizationalUnitDistinguishedName_1: Optional[
        OrganizationalUnitDistinguishedName
    ] = Field(None, alias='OrganizationalUnitDistinguishedName')
    UserName: Optional[DirectoryUserName] = None


class SelfManagedActiveDirectoryConfiguration(BaseModel):
    DnsIps_1: DnsIps = Field(..., alias='DnsIps')
    DomainName: ActiveDirectoryFullyQualifiedName
    FileSystemAdministratorsGroup: Optional[FileSystemAdministratorsGroupName] = None
    OrganizationalUnitDistinguishedName_1: Optional[
        OrganizationalUnitDistinguishedName
    ] = Field(None, alias='OrganizationalUnitDistinguishedName')
    Password: DirectoryPassword
    UserName: DirectoryUserName


class SelfManagedActiveDirectoryConfigurationUpdates(BaseModel):
    DnsIps_1: Optional[DnsIps] = Field(None, alias='DnsIps')
    Password: Optional[DirectoryPassword] = None
    UserName: Optional[DirectoryUserName] = None


class SnapshotFilter(BaseModel):
    Name: Optional[SnapshotFilterName] = None
    Values: Optional[SnapshotFilterValues] = None


class SnapshotFilters(RootModel[List[SnapshotFilter]]):
    root: List[SnapshotFilter] = Field(..., max_length=2)


class StorageVirtualMachineFilter(BaseModel):
    Name: Optional[StorageVirtualMachineFilterName] = None
    Values: Optional[StorageVirtualMachineFilterValues] = None


class StorageVirtualMachineFilters(RootModel[List[StorageVirtualMachineFilter]]):
    root: List[StorageVirtualMachineFilter] = Field(..., max_length=1)


class SvmActiveDirectoryConfiguration(BaseModel):
    NetBiosName: Optional[NetBiosAlias] = None
    SelfManagedActiveDirectoryConfiguration: Optional[
        SelfManagedActiveDirectoryAttributes
    ] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class Tags(RootModel[List[Tag]]):
    root: List[Tag] = Field(
        ...,
        description='A list of <code>Tag</code> values, with a maximum of 50 elements.',
        max_length=50,
        min_length=1,
    )


class TieringPolicy(BaseModel):
    CoolingPeriod_1: Optional[CoolingPeriod] = Field(None, alias='CoolingPeriod')
    Name: Optional[TieringPolicyName] = None


class UpdateDataRepositoryAssociationRequest(BaseModel):
    AssociationId: DataRepositoryAssociationId
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    ImportedFileChunkSize: Optional[Megabytes] = None
    S3: Optional[S3DataRepositoryConfiguration] = None


class UpdateFileCacheLustreConfiguration(BaseModel):
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class UpdateFileCacheRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileCacheId_1: FileCacheId = Field(..., alias='FileCacheId')
    LustreConfiguration: Optional[UpdateFileCacheLustreConfiguration] = None


class UpdateFileSystemLustreConfiguration(BaseModel):
    AutoImportPolicy: Optional[AutoImportPolicyType] = None
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DataCompressionType_1: Optional[DataCompressionType] = Field(
        None, alias='DataCompressionType'
    )
    LogConfiguration: Optional[LustreLogCreateConfiguration] = None
    RootSquashConfiguration: Optional[LustreRootSquashConfiguration] = None
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class UpdateFileSystemOntapConfiguration(BaseModel):
    AddRouteTableIds: Optional[RouteTableIds] = None
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DiskIopsConfiguration_1: Optional[DiskIopsConfiguration] = Field(
        None, alias='DiskIopsConfiguration'
    )
    FsxAdminPassword: Optional[AdminPassword] = None
    RemoveRouteTableIds: Optional[RouteTableIds] = None
    ThroughputCapacity: Optional[MegabytesPerSecond] = None
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class UpdateFileSystemOpenZFSConfiguration(BaseModel):
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    CopyTagsToBackups: Optional[Flag] = None
    CopyTagsToVolumes: Optional[Flag] = None
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DiskIopsConfiguration_1: Optional[DiskIopsConfiguration] = Field(
        None, alias='DiskIopsConfiguration'
    )
    ThroughputCapacity: Optional[MegabytesPerSecond] = None
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class UpdateFileSystemWindowsConfiguration(BaseModel):
    AuditLogConfiguration: Optional[WindowsAuditLogCreateConfiguration] = None
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    SelfManagedActiveDirectoryConfiguration: Optional[
        SelfManagedActiveDirectoryConfigurationUpdates
    ] = None
    ThroughputCapacity: Optional[MegabytesPerSecond] = None
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class UpdateOntapVolumeConfiguration(BaseModel):
    CopyTagsToBackups: Optional[Flag] = None
    JunctionPath_1: Optional[JunctionPath] = Field(None, alias='JunctionPath')
    SecurityStyle_1: Optional[SecurityStyle] = Field(None, alias='SecurityStyle')
    SizeInMegabytes: Optional[VolumeCapacity] = None
    SnapshotPolicy_1: Optional[SnapshotPolicy] = Field(None, alias='SnapshotPolicy')
    StorageEfficiencyEnabled: Optional[Flag] = None
    TieringPolicy_1: Optional[TieringPolicy] = Field(None, alias='TieringPolicy')


class UpdateOpenZFSVolumeConfiguration(BaseModel):
    DataCompressionType: Optional[OpenZFSDataCompressionType] = None
    NfsExports: Optional[OpenZFSNfsExports] = None
    ReadOnly_1: Optional[ReadOnly] = Field(None, alias='ReadOnly')
    RecordSizeKiB: Optional[IntegerRecordSizeKiB] = None
    StorageCapacityQuotaGiB: Optional[IntegerNoMaxFromNegativeOne] = None
    StorageCapacityReservationGiB: Optional[IntegerNoMaxFromNegativeOne] = None
    UserAndGroupQuotas: Optional[OpenZFSUserAndGroupQuotas] = None


class UpdateSvmActiveDirectoryConfiguration(BaseModel):
    SelfManagedActiveDirectoryConfiguration: Optional[
        SelfManagedActiveDirectoryConfigurationUpdates
    ] = None


class UpdateVolumeRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Name: Optional[VolumeName] = None
    OntapConfiguration: Optional[UpdateOntapVolumeConfiguration] = None
    OpenZFSConfiguration: Optional[UpdateOpenZFSVolumeConfiguration] = None
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class VolumeFilter(BaseModel):
    Name: Optional[VolumeFilterName] = None
    Values: Optional[VolumeFilterValues] = None


class VolumeFilters(RootModel[List[VolumeFilter]]):
    root: List[VolumeFilter] = Field(..., max_length=2)


class WindowsFileSystemConfiguration(BaseModel):
    ActiveDirectoryId: Optional[DirectoryId] = None
    Aliases_1: Optional[Aliases] = Field(None, alias='Aliases')
    AuditLogConfiguration: Optional[WindowsAuditLogConfiguration] = None
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    CopyTagsToBackups: Optional[Flag] = None
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DeploymentType: Optional[WindowsDeploymentType] = None
    MaintenanceOperationsInProgress: Optional[FileSystemMaintenanceOperations] = None
    PreferredFileServerIp: Optional[IpAddress] = None
    PreferredSubnetId: Optional[SubnetId] = None
    RemoteAdministrationEndpoint: Optional[DNSName] = None
    SelfManagedActiveDirectoryConfiguration: Optional[
        SelfManagedActiveDirectoryAttributes
    ] = None
    ThroughputCapacity: Optional[MegabytesPerSecond] = None
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class CopyBackupRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    CopyTags: Optional[Flag] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    SourceBackupId_1: SourceBackupId = Field(..., alias='SourceBackupId')
    SourceRegion: Optional[Region] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateBackupRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemId_1: Optional[FileSystemId] = Field(None, alias='FileSystemId')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')


class CreateDataRepositoryAssociationRequest(BaseModel):
    BatchImportMetaDataOnCreate_1: Optional[BatchImportMetaDataOnCreate] = Field(
        None, alias='BatchImportMetaDataOnCreate'
    )
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DataRepositoryPath: ArchivePath
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')
    FileSystemPath: Optional[Namespace] = None
    ImportedFileChunkSize: Optional[Megabytes] = None
    S3: Optional[S3DataRepositoryConfiguration] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateDataRepositoryTaskRequest(BaseModel):
    CapacityToRelease_1: Optional[CapacityToRelease] = Field(
        None, alias='CapacityToRelease'
    )
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')
    Paths: Optional[DataRepositoryTaskPaths] = None
    Report: CompletionReport
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: DataRepositoryTaskType


class CreateFileCacheLustreConfiguration(BaseModel):
    DeploymentType: FileCacheLustreDeploymentType
    MetadataConfiguration: FileCacheLustreMetadataConfiguration
    PerUnitStorageThroughput_1: PerUnitStorageThroughput = Field(
        ..., alias='PerUnitStorageThroughput'
    )
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class CreateFileSystemOntapConfiguration(BaseModel):
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DeploymentType: OntapDeploymentType
    DiskIopsConfiguration_1: Optional[DiskIopsConfiguration] = Field(
        None, alias='DiskIopsConfiguration'
    )
    EndpointIpAddressRange: Optional[IpAddressRange] = None
    FsxAdminPassword: Optional[AdminPassword] = None
    PreferredSubnetId: Optional[SubnetId] = None
    RouteTableIds_1: Optional[RouteTableIds] = Field(None, alias='RouteTableIds')
    ThroughputCapacity: MegabytesPerSecond
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class CreateFileSystemWindowsConfiguration(BaseModel):
    ActiveDirectoryId: Optional[DirectoryId] = None
    Aliases: Optional[AlternateDNSNames] = None
    AuditLogConfiguration: Optional[WindowsAuditLogCreateConfiguration] = None
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    CopyTagsToBackups: Optional[Flag] = None
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DeploymentType: Optional[WindowsDeploymentType] = None
    PreferredSubnetId: Optional[SubnetId] = None
    SelfManagedActiveDirectoryConfiguration_1: Optional[
        SelfManagedActiveDirectoryConfiguration
    ] = Field(None, alias='SelfManagedActiveDirectoryConfiguration')
    ThroughputCapacity: MegabytesPerSecond
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class CreateOntapVolumeConfiguration(BaseModel):
    CopyTagsToBackups: Optional[Flag] = None
    JunctionPath_1: Optional[JunctionPath] = Field(None, alias='JunctionPath')
    OntapVolumeType: Optional[InputOntapVolumeType] = None
    SecurityStyle_1: Optional[SecurityStyle] = Field(None, alias='SecurityStyle')
    SizeInMegabytes: VolumeCapacity
    SnapshotPolicy_1: Optional[SnapshotPolicy] = Field(None, alias='SnapshotPolicy')
    StorageEfficiencyEnabled: Optional[Flag] = None
    StorageVirtualMachineId_1: StorageVirtualMachineId = Field(
        ..., alias='StorageVirtualMachineId'
    )
    TieringPolicy_1: Optional[TieringPolicy] = Field(None, alias='TieringPolicy')


class CreateOpenZFSVolumeConfiguration(BaseModel):
    CopyTagsToSnapshots: Optional[Flag] = None
    DataCompressionType: Optional[OpenZFSDataCompressionType] = None
    NfsExports: Optional[OpenZFSNfsExports] = None
    OriginSnapshot: Optional[CreateOpenZFSOriginSnapshotConfiguration] = None
    ParentVolumeId: VolumeId
    ReadOnly_1: Optional[ReadOnly] = Field(None, alias='ReadOnly')
    RecordSizeKiB: Optional[IntegerRecordSizeKiB] = None
    StorageCapacityQuotaGiB: Optional[IntegerNoMaxFromNegativeOne] = None
    StorageCapacityReservationGiB: Optional[IntegerNoMaxFromNegativeOne] = None
    UserAndGroupQuotas: Optional[OpenZFSUserAndGroupQuotas] = None


class CreateSnapshotRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Name: SnapshotName
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class CreateSvmActiveDirectoryConfiguration(BaseModel):
    NetBiosName: NetBiosAlias
    SelfManagedActiveDirectoryConfiguration_1: Optional[
        SelfManagedActiveDirectoryConfiguration
    ] = Field(None, alias='SelfManagedActiveDirectoryConfiguration')


class CreateVolumeFromBackupRequest(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Name: VolumeName
    OntapConfiguration: Optional[CreateOntapVolumeConfiguration] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateVolumeRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Name: VolumeName
    OntapConfiguration: Optional[CreateOntapVolumeConfiguration] = None
    OpenZFSConfiguration: Optional[CreateOpenZFSVolumeConfiguration] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VolumeType_1: VolumeType = Field(..., alias='VolumeType')


class DataRepositoryAssociation(BaseModel):
    AssociationId: Optional[DataRepositoryAssociationId] = None
    BatchImportMetaDataOnCreate_1: Optional[BatchImportMetaDataOnCreate] = Field(
        None, alias='BatchImportMetaDataOnCreate'
    )
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DataRepositoryPath: Optional[ArchivePath] = None
    DataRepositorySubdirectories: Optional[SubDirectoriesPaths] = None
    FailureDetails: Optional[DataRepositoryFailureDetails] = None
    FileCacheId_1: Optional[FileCacheId] = Field(None, alias='FileCacheId')
    FileCachePath: Optional[Namespace] = None
    FileSystemId_1: Optional[FileSystemId] = Field(None, alias='FileSystemId')
    FileSystemPath: Optional[Namespace] = None
    ImportedFileChunkSize: Optional[Megabytes] = None
    Lifecycle: Optional[DataRepositoryLifecycle] = None
    NFS: Optional[NFSDataRepositoryConfiguration] = None
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    S3: Optional[S3DataRepositoryConfiguration] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DataRepositoryAssociations(RootModel[List[DataRepositoryAssociation]]):
    root: List[DataRepositoryAssociation] = Field(..., max_length=100)


class DataRepositoryConfiguration(BaseModel):
    AutoImportPolicy: Optional[AutoImportPolicyType] = None
    ExportPath: Optional[ArchivePath] = None
    FailureDetails: Optional[DataRepositoryFailureDetails] = None
    ImportPath: Optional[ArchivePath] = None
    ImportedFileChunkSize: Optional[Megabytes] = None
    Lifecycle: Optional[DataRepositoryLifecycle] = None


class DataRepositoryTask(BaseModel):
    CapacityToRelease_1: Optional[CapacityToRelease] = Field(
        None, alias='CapacityToRelease'
    )
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    EndTime_1: Optional[EndTime] = Field(None, alias='EndTime')
    FailureDetails: Optional[DataRepositoryTaskFailureDetails] = None
    FileCacheId_1: Optional[FileCacheId] = Field(None, alias='FileCacheId')
    FileSystemId_1: Optional[FileSystemId] = Field(None, alias='FileSystemId')
    Lifecycle: DataRepositoryTaskLifecycle
    Paths: Optional[DataRepositoryTaskPaths] = None
    Report: Optional[CompletionReport] = None
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    StartTime_1: Optional[StartTime] = Field(None, alias='StartTime')
    Status: Optional[DataRepositoryTaskStatus] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TaskId_1: TaskId = Field(..., alias='TaskId')
    Type: DataRepositoryTaskType


class DataRepositoryTasks(RootModel[List[DataRepositoryTask]]):
    root: List[DataRepositoryTask] = Field(..., max_length=50)


class DeleteFileSystemLustreConfiguration(BaseModel):
    FinalBackupTags: Optional[Tags] = None
    SkipFinalBackup: Optional[Flag] = None


class DeleteFileSystemLustreResponse(BaseModel):
    FinalBackupId: Optional[BackupId] = None
    FinalBackupTags: Optional[Tags] = None


class DeleteFileSystemOpenZFSConfiguration(BaseModel):
    FinalBackupTags: Optional[Tags] = None
    Options: Optional[DeleteFileSystemOpenZFSOptions] = None
    SkipFinalBackup: Optional[Flag] = None


class DeleteFileSystemOpenZFSResponse(BaseModel):
    FinalBackupId: Optional[BackupId] = None
    FinalBackupTags: Optional[Tags] = None


class DeleteFileSystemWindowsConfiguration(BaseModel):
    FinalBackupTags: Optional[Tags] = None
    SkipFinalBackup: Optional[Flag] = None


class DeleteFileSystemWindowsResponse(BaseModel):
    FinalBackupId: Optional[BackupId] = None
    FinalBackupTags: Optional[Tags] = None


class DeleteVolumeOntapConfiguration(BaseModel):
    FinalBackupTags: Optional[Tags] = None
    SkipFinalBackup: Optional[Flag] = None


class DeleteVolumeOntapResponse(BaseModel):
    FinalBackupId: Optional[BackupId] = None
    FinalBackupTags: Optional[Tags] = None


class DeleteVolumeRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    OntapConfiguration: Optional[DeleteVolumeOntapConfiguration] = None
    OpenZFSConfiguration: Optional[DeleteVolumeOpenZFSConfiguration] = None
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class DeleteVolumeResponse(BaseModel):
    Lifecycle: Optional[VolumeLifecycle] = None
    OntapResponse: Optional[DeleteVolumeOntapResponse] = None
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')


class DescribeBackupsRequest(BaseModel):
    BackupIds_1: Optional[BackupIds] = Field(None, alias='BackupIds')
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeDataRepositoryAssociationsRequest(BaseModel):
    AssociationIds: Optional[DataRepositoryAssociationIds] = None
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults: Optional[LimitedMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeDataRepositoryAssociationsResponse(BaseModel):
    Associations: Optional[DataRepositoryAssociations] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeDataRepositoryTasksResponse(BaseModel):
    DataRepositoryTasks_1: Optional[DataRepositoryTasks] = Field(
        None, alias='DataRepositoryTasks'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeSnapshotsRequest(BaseModel):
    Filters: Optional[SnapshotFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SnapshotIds_1: Optional[SnapshotIds] = Field(None, alias='SnapshotIds')


class DescribeStorageVirtualMachinesRequest(BaseModel):
    Filters: Optional[StorageVirtualMachineFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StorageVirtualMachineIds_1: Optional[StorageVirtualMachineIds] = Field(
        None, alias='StorageVirtualMachineIds'
    )


class DescribeVolumesRequest(BaseModel):
    Filters: Optional[VolumeFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VolumeIds_1: Optional[VolumeIds] = Field(None, alias='VolumeIds')


class FileCacheDataRepositoryAssociation(BaseModel):
    DataRepositoryPath: ArchivePath
    DataRepositorySubdirectories: Optional[SubDirectoriesPaths] = None
    FileCachePath: Namespace
    NFS: Optional[FileCacheNFSConfiguration] = None


class FileCacheLustreConfiguration(BaseModel):
    DeploymentType: Optional[FileCacheLustreDeploymentType] = None
    LogConfiguration: Optional[LustreLogConfiguration] = None
    MetadataConfiguration: Optional[FileCacheLustreMetadataConfiguration] = None
    MountName: Optional[LustreFileSystemMountName] = None
    PerUnitStorageThroughput_1: Optional[PerUnitStorageThroughput] = Field(
        None, alias='PerUnitStorageThroughput'
    )
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class ListTagsForResourceResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class LustreFileSystemConfiguration(BaseModel):
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    CopyTagsToBackups: Optional[Flag] = None
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DataCompressionType_1: Optional[DataCompressionType] = Field(
        None, alias='DataCompressionType'
    )
    DataRepositoryConfiguration_1: Optional[DataRepositoryConfiguration] = Field(
        None, alias='DataRepositoryConfiguration'
    )
    DeploymentType: Optional[LustreDeploymentType] = None
    DriveCacheType_1: Optional[DriveCacheType] = Field(None, alias='DriveCacheType')
    LogConfiguration: Optional[LustreLogConfiguration] = None
    MountName: Optional[LustreFileSystemMountName] = None
    PerUnitStorageThroughput_1: Optional[PerUnitStorageThroughput] = Field(
        None, alias='PerUnitStorageThroughput'
    )
    RootSquashConfiguration: Optional[LustreRootSquashConfiguration] = None
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class OntapVolumeConfiguration(BaseModel):
    CopyTagsToBackups: Optional[Flag] = None
    FlexCacheEndpointType_1: Optional[FlexCacheEndpointType] = Field(
        None, alias='FlexCacheEndpointType'
    )
    JunctionPath_1: Optional[JunctionPath] = Field(None, alias='JunctionPath')
    OntapVolumeType_1: Optional[OntapVolumeType] = Field(None, alias='OntapVolumeType')
    SecurityStyle_1: Optional[SecurityStyle] = Field(None, alias='SecurityStyle')
    SizeInMegabytes: Optional[VolumeCapacity] = None
    SnapshotPolicy_1: Optional[SnapshotPolicy] = Field(None, alias='SnapshotPolicy')
    StorageEfficiencyEnabled: Optional[Flag] = None
    StorageVirtualMachineId_1: Optional[StorageVirtualMachineId] = Field(
        None, alias='StorageVirtualMachineId'
    )
    StorageVirtualMachineRoot: Optional[Flag] = None
    TieringPolicy_1: Optional[TieringPolicy] = Field(None, alias='TieringPolicy')
    UUID_1: Optional[UUID] = Field(None, alias='UUID')


class OpenZFSCreateRootVolumeConfiguration(BaseModel):
    CopyTagsToSnapshots: Optional[Flag] = None
    DataCompressionType: Optional[OpenZFSDataCompressionType] = None
    NfsExports: Optional[OpenZFSNfsExports] = None
    ReadOnly_1: Optional[ReadOnly] = Field(None, alias='ReadOnly')
    RecordSizeKiB: Optional[IntegerRecordSizeKiB] = None
    UserAndGroupQuotas: Optional[OpenZFSUserAndGroupQuotas] = None


class StorageVirtualMachine(BaseModel):
    ActiveDirectoryConfiguration: Optional[SvmActiveDirectoryConfiguration] = None
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    Endpoints: Optional[SvmEndpoints] = None
    FileSystemId_1: Optional[FileSystemId] = Field(None, alias='FileSystemId')
    Lifecycle: Optional[StorageVirtualMachineLifecycle] = None
    LifecycleTransitionReason_1: Optional[LifecycleTransitionReason] = Field(
        None, alias='LifecycleTransitionReason'
    )
    Name: Optional[StorageVirtualMachineName] = None
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    RootVolumeSecurityStyle: Optional[StorageVirtualMachineRootVolumeSecurityStyle] = (
        None
    )
    StorageVirtualMachineId_1: Optional[StorageVirtualMachineId] = Field(
        None, alias='StorageVirtualMachineId'
    )
    Subtype: Optional[StorageVirtualMachineSubtype] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UUID_1: Optional[UUID] = Field(None, alias='UUID')


class StorageVirtualMachines(RootModel[List[StorageVirtualMachine]]):
    root: List[StorageVirtualMachine] = Field(..., max_length=50)


class TagResourceRequest(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    Tags_1: Tags = Field(..., alias='Tags')


class UpdateDataRepositoryAssociationResponse(BaseModel):
    Association: Optional[DataRepositoryAssociation] = None


class UpdateFileSystemRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')
    LustreConfiguration: Optional[UpdateFileSystemLustreConfiguration] = None
    OntapConfiguration: Optional[UpdateFileSystemOntapConfiguration] = None
    OpenZFSConfiguration: Optional[UpdateFileSystemOpenZFSConfiguration] = None
    StorageCapacity_1: Optional[StorageCapacity] = Field(None, alias='StorageCapacity')
    WindowsConfiguration: Optional[UpdateFileSystemWindowsConfiguration] = None


class UpdateStorageVirtualMachineRequest(BaseModel):
    ActiveDirectoryConfiguration: Optional[UpdateSvmActiveDirectoryConfiguration] = None
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    StorageVirtualMachineId_1: StorageVirtualMachineId = Field(
        ..., alias='StorageVirtualMachineId'
    )
    SvmAdminPassword: Optional[AdminPassword] = None


class UpdateStorageVirtualMachineResponse(BaseModel):
    StorageVirtualMachine_1: Optional[StorageVirtualMachine] = Field(
        None, alias='StorageVirtualMachine'
    )


class CreateDataRepositoryAssociationResponse(BaseModel):
    Association: Optional[DataRepositoryAssociation] = None


class CreateDataRepositoryTaskResponse(BaseModel):
    DataRepositoryTask_1: Optional[DataRepositoryTask] = Field(
        None, alias='DataRepositoryTask'
    )


class CreateFileCacheDataRepositoryAssociations(
    RootModel[List[FileCacheDataRepositoryAssociation]]
):
    root: List[FileCacheDataRepositoryAssociation] = Field(..., max_length=8)


class CreateFileCacheRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    CopyTagsToDataRepositoryAssociations_1: Optional[
        CopyTagsToDataRepositoryAssociations
    ] = Field(None, alias='CopyTagsToDataRepositoryAssociations')
    DataRepositoryAssociations: Optional[CreateFileCacheDataRepositoryAssociations] = (
        None
    )
    FileCacheType_1: FileCacheType = Field(..., alias='FileCacheType')
    FileCacheTypeVersion: FileSystemTypeVersion
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    LustreConfiguration: Optional[CreateFileCacheLustreConfiguration] = None
    SecurityGroupIds_1: Optional[SecurityGroupIds] = Field(
        None, alias='SecurityGroupIds'
    )
    StorageCapacity_1: StorageCapacity = Field(..., alias='StorageCapacity')
    SubnetIds_1: SubnetIds = Field(..., alias='SubnetIds')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateFileSystemOpenZFSConfiguration(BaseModel):
    AutomaticBackupRetentionDays_1: Optional[AutomaticBackupRetentionDays] = Field(
        None, alias='AutomaticBackupRetentionDays'
    )
    CopyTagsToBackups: Optional[Flag] = None
    CopyTagsToVolumes: Optional[Flag] = None
    DailyAutomaticBackupStartTime: Optional[DailyTime] = None
    DeploymentType: OpenZFSDeploymentType
    DiskIopsConfiguration_1: Optional[DiskIopsConfiguration] = Field(
        None, alias='DiskIopsConfiguration'
    )
    RootVolumeConfiguration: Optional[OpenZFSCreateRootVolumeConfiguration] = None
    ThroughputCapacity: MegabytesPerSecond
    WeeklyMaintenanceStartTime: Optional[WeeklyTime] = None


class CreateFileSystemRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemType_1: FileSystemType = Field(..., alias='FileSystemType')
    FileSystemTypeVersion_1: Optional[FileSystemTypeVersion] = Field(
        None, alias='FileSystemTypeVersion'
    )
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    LustreConfiguration: Optional[CreateFileSystemLustreConfiguration] = None
    OntapConfiguration: Optional[CreateFileSystemOntapConfiguration] = None
    OpenZFSConfiguration: Optional[CreateFileSystemOpenZFSConfiguration] = None
    SecurityGroupIds_1: Optional[SecurityGroupIds] = Field(
        None, alias='SecurityGroupIds'
    )
    StorageCapacity_1: StorageCapacity = Field(..., alias='StorageCapacity')
    StorageType_1: Optional[StorageType] = Field(None, alias='StorageType')
    SubnetIds_1: SubnetIds = Field(..., alias='SubnetIds')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    WindowsConfiguration: Optional[CreateFileSystemWindowsConfiguration] = None


class CreateStorageVirtualMachineRequest(BaseModel):
    ActiveDirectoryConfiguration: Optional[CreateSvmActiveDirectoryConfiguration] = None
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')
    Name: StorageVirtualMachineName
    RootVolumeSecurityStyle: Optional[StorageVirtualMachineRootVolumeSecurityStyle] = (
        None
    )
    SvmAdminPassword: Optional[AdminPassword] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateStorageVirtualMachineResponse(BaseModel):
    StorageVirtualMachine_1: Optional[StorageVirtualMachine] = Field(
        None, alias='StorageVirtualMachine'
    )


class DeleteFileSystemRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')
    LustreConfiguration: Optional[DeleteFileSystemLustreConfiguration] = None
    OpenZFSConfiguration: Optional[DeleteFileSystemOpenZFSConfiguration] = None
    WindowsConfiguration: Optional[DeleteFileSystemWindowsConfiguration] = None


class DeleteFileSystemResponse(BaseModel):
    FileSystemId_1: Optional[FileSystemId] = Field(None, alias='FileSystemId')
    Lifecycle: Optional[FileSystemLifecycle] = None
    LustreResponse: Optional[DeleteFileSystemLustreResponse] = None
    OpenZFSResponse: Optional[DeleteFileSystemOpenZFSResponse] = None
    WindowsResponse: Optional[DeleteFileSystemWindowsResponse] = None


class DescribeStorageVirtualMachinesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StorageVirtualMachines_1: Optional[StorageVirtualMachines] = Field(
        None, alias='StorageVirtualMachines'
    )


class FileCache(BaseModel):
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DNSName_1: Optional[DNSName] = Field(None, alias='DNSName')
    DataRepositoryAssociationIds_1: Optional[DataRepositoryAssociationIds] = Field(
        None, alias='DataRepositoryAssociationIds'
    )
    FailureDetails: Optional[FileCacheFailureDetails] = None
    FileCacheId_1: Optional[FileCacheId] = Field(None, alias='FileCacheId')
    FileCacheType_1: Optional[FileCacheType] = Field(None, alias='FileCacheType')
    FileCacheTypeVersion: Optional[FileSystemTypeVersion] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    Lifecycle: Optional[FileCacheLifecycle] = None
    LustreConfiguration: Optional[FileCacheLustreConfiguration] = None
    NetworkInterfaceIds_1: Optional[NetworkInterfaceIds] = Field(
        None, alias='NetworkInterfaceIds'
    )
    OwnerId: Optional[AWSAccountId] = None
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    StorageCapacity_1: Optional[StorageCapacity] = Field(None, alias='StorageCapacity')
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class FileCacheCreating(BaseModel):
    CopyTagsToDataRepositoryAssociations_1: Optional[
        CopyTagsToDataRepositoryAssociations
    ] = Field(None, alias='CopyTagsToDataRepositoryAssociations')
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DNSName_1: Optional[DNSName] = Field(None, alias='DNSName')
    DataRepositoryAssociationIds_1: Optional[DataRepositoryAssociationIds] = Field(
        None, alias='DataRepositoryAssociationIds'
    )
    FailureDetails: Optional[FileCacheFailureDetails] = None
    FileCacheId_1: Optional[FileCacheId] = Field(None, alias='FileCacheId')
    FileCacheType_1: Optional[FileCacheType] = Field(None, alias='FileCacheType')
    FileCacheTypeVersion: Optional[FileSystemTypeVersion] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    Lifecycle: Optional[FileCacheLifecycle] = None
    LustreConfiguration: Optional[FileCacheLustreConfiguration] = None
    NetworkInterfaceIds_1: Optional[NetworkInterfaceIds] = Field(
        None, alias='NetworkInterfaceIds'
    )
    OwnerId: Optional[AWSAccountId] = None
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    StorageCapacity_1: Optional[StorageCapacity] = Field(None, alias='StorageCapacity')
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class FileCaches(RootModel[List[FileCache]]):
    root: List[FileCache] = Field(..., max_length=50)


class UpdateFileCacheResponse(BaseModel):
    FileCache_1: Optional[FileCache] = Field(None, alias='FileCache')


class CreateFileCacheResponse(BaseModel):
    FileCache: Optional[FileCacheCreating] = None


class CreateFileSystemFromBackupRequest(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FileSystemTypeVersion_1: Optional[FileSystemTypeVersion] = Field(
        None, alias='FileSystemTypeVersion'
    )
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    LustreConfiguration: Optional[CreateFileSystemLustreConfiguration] = None
    OpenZFSConfiguration: Optional[CreateFileSystemOpenZFSConfiguration] = None
    SecurityGroupIds_1: Optional[SecurityGroupIds] = Field(
        None, alias='SecurityGroupIds'
    )
    StorageCapacity_1: Optional[StorageCapacity] = Field(None, alias='StorageCapacity')
    StorageType_1: Optional[StorageType] = Field(None, alias='StorageType')
    SubnetIds_1: SubnetIds = Field(..., alias='SubnetIds')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    WindowsConfiguration: Optional[CreateFileSystemWindowsConfiguration] = None


class DescribeFileCachesResponse(BaseModel):
    FileCaches_1: Optional[FileCaches] = Field(None, alias='FileCaches')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class AdministrativeAction(BaseModel):
    AdministrativeActionType_1: Optional[AdministrativeActionType] = Field(
        None, alias='AdministrativeActionType'
    )
    FailureDetails: Optional[AdministrativeActionFailureDetails] = None
    ProgressPercent_1: Optional[ProgressPercent] = Field(None, alias='ProgressPercent')
    RequestTime_1: Optional[RequestTime] = Field(None, alias='RequestTime')
    Status_1: Optional[Status] = Field(None, alias='Status')
    TargetFileSystemValues: Optional[FileSystem] = None
    TargetSnapshotValues: Optional[Snapshot] = None
    TargetVolumeValues: Optional[Volume] = None


class AdministrativeActions(RootModel[List[AdministrativeAction]]):
    root: List[AdministrativeAction] = Field(..., max_length=50)


class Backup(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    DirectoryInformation: Optional[ActiveDirectoryBackupAttributes] = None
    FailureDetails: Optional[BackupFailureDetails] = None
    FileSystem_1: FileSystem = Field(..., alias='FileSystem')
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    Lifecycle: BackupLifecycle
    OwnerId: Optional[AWSAccountId] = None
    ProgressPercent_1: Optional[ProgressPercent] = Field(None, alias='ProgressPercent')
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    SourceBackupId: Optional[BackupId] = None
    SourceBackupRegion: Optional[Region] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: BackupType
    Volume_1: Optional[Volume] = Field(None, alias='Volume')


class Backups(RootModel[List[Backup]]):
    root: List[Backup] = Field(
        ..., description='A list of file system backups.', max_length=50
    )


class CopyBackupResponse(BaseModel):
    Backup_1: Optional[Backup] = Field(None, alias='Backup')


class CreateBackupResponse(BaseModel):
    Backup_1: Optional[Backup] = Field(None, alias='Backup')


class CreateFileSystemFromBackupResponse(BaseModel):
    FileSystem_1: Optional[FileSystem] = Field(None, alias='FileSystem')


class CreateFileSystemResponse(BaseModel):
    FileSystem_1: Optional[FileSystem] = Field(None, alias='FileSystem')


class CreateSnapshotResponse(BaseModel):
    Snapshot_1: Optional[Snapshot] = Field(None, alias='Snapshot')


class CreateVolumeFromBackupResponse(BaseModel):
    Volume_1: Optional[Volume] = Field(None, alias='Volume')


class CreateVolumeResponse(BaseModel):
    Volume_1: Optional[Volume] = Field(None, alias='Volume')


class DescribeBackupsResponse(BaseModel):
    Backups_1: Optional[Backups] = Field(None, alias='Backups')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFileSystemsResponse(BaseModel):
    FileSystems_1: Optional[FileSystems] = Field(None, alias='FileSystems')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeSnapshotsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Snapshots_1: Optional[Snapshots] = Field(None, alias='Snapshots')


class DescribeVolumesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Volumes_1: Optional[Volumes] = Field(None, alias='Volumes')


class FileSystem(BaseModel):
    AdministrativeActions_1: Optional[AdministrativeActions] = Field(
        None, alias='AdministrativeActions'
    )
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DNSName_1: Optional[DNSName] = Field(None, alias='DNSName')
    FailureDetails: Optional[FileSystemFailureDetails] = None
    FileSystemId_1: Optional[FileSystemId] = Field(None, alias='FileSystemId')
    FileSystemType_1: Optional[FileSystemType] = Field(None, alias='FileSystemType')
    FileSystemTypeVersion_1: Optional[FileSystemTypeVersion] = Field(
        None, alias='FileSystemTypeVersion'
    )
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    Lifecycle: Optional[FileSystemLifecycle] = None
    LustreConfiguration: Optional[LustreFileSystemConfiguration] = None
    NetworkInterfaceIds_1: Optional[NetworkInterfaceIds] = Field(
        None, alias='NetworkInterfaceIds'
    )
    OntapConfiguration: Optional[OntapFileSystemConfiguration] = None
    OpenZFSConfiguration: Optional[OpenZFSFileSystemConfiguration] = None
    OwnerId: Optional[AWSAccountId] = None
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    StorageCapacity_1: Optional[StorageCapacity] = Field(None, alias='StorageCapacity')
    StorageType_1: Optional[StorageType] = Field(None, alias='StorageType')
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')
    WindowsConfiguration: Optional[WindowsFileSystemConfiguration] = None


class FileSystems(RootModel[List[FileSystem]]):
    root: List[FileSystem] = Field(
        ..., description='A list of file system resource descriptions.', max_length=50
    )


class ReleaseFileSystemNfsV3LocksResponse(BaseModel):
    FileSystem_1: Optional[FileSystem] = Field(None, alias='FileSystem')


class RestoreVolumeFromSnapshotResponse(BaseModel):
    AdministrativeActions_1: Optional[AdministrativeActions] = Field(
        None, alias='AdministrativeActions'
    )
    Lifecycle: Optional[VolumeLifecycle] = None
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')


class Snapshot(BaseModel):
    AdministrativeActions_1: Optional[AdministrativeActions] = Field(
        None, alias='AdministrativeActions'
    )
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    Lifecycle: Optional[SnapshotLifecycle] = None
    LifecycleTransitionReason_1: Optional[LifecycleTransitionReason] = Field(
        None, alias='LifecycleTransitionReason'
    )
    Name: Optional[SnapshotName] = None
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')


class Snapshots(RootModel[List[Snapshot]]):
    root: List[Snapshot] = Field(..., max_length=50)


class UpdateFileSystemResponse(BaseModel):
    FileSystem_1: Optional[FileSystem] = Field(None, alias='FileSystem')


class UpdateSnapshotResponse(BaseModel):
    Snapshot_1: Optional[Snapshot] = Field(None, alias='Snapshot')


class UpdateVolumeResponse(BaseModel):
    Volume_1: Optional[Volume] = Field(None, alias='Volume')


class Volume(BaseModel):
    AdministrativeActions_1: Optional[AdministrativeActions] = Field(
        None, alias='AdministrativeActions'
    )
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    FileSystemId_1: Optional[FileSystemId] = Field(None, alias='FileSystemId')
    Lifecycle: Optional[VolumeLifecycle] = None
    LifecycleTransitionReason_1: Optional[LifecycleTransitionReason] = Field(
        None, alias='LifecycleTransitionReason'
    )
    Name: Optional[VolumeName] = None
    OntapConfiguration: Optional[OntapVolumeConfiguration] = None
    OpenZFSConfiguration: Optional[OpenZFSVolumeConfiguration] = None
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')


class Volumes(RootModel[List[Volume]]):
    root: List[Volume] = Field(..., max_length=50)


AdministrativeAction.model_rebuild()
Backup.model_rebuild()
CreateFileSystemFromBackupResponse.model_rebuild()
CreateFileSystemResponse.model_rebuild()
CreateSnapshotResponse.model_rebuild()
CreateVolumeFromBackupResponse.model_rebuild()
CreateVolumeResponse.model_rebuild()
DescribeFileSystemsResponse.model_rebuild()
DescribeSnapshotsResponse.model_rebuild()
DescribeVolumesResponse.model_rebuild()
UpdateVolumeResponse.model_rebuild()
